{"version":3,"sources":["components/Carousel/Carousel.tsx","components/Form/Form.tsx","App.tsx","index.tsx"],"names":["Carousel","valuesImage","transform","setTransform","images","step","frameSize","itemWidth","animationDuration","infinite","lastPosition","length","className","style","width","map","image","transition","src","alt","type","cn","onClick","Form","setValuesImage","action","method","htmlFor","onChange","e","target","value","id","name","min","max","checked","defaultValues","App","useState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3248c4e7.chunk.js","sourcesContent":["import cn from 'classnames';\nimport './Carousel.scss';\nimport { ValuesImgType } from '../../types/Types';\n\ntype Props = {\n  valuesImage: ValuesImgType;\n  transform: number;\n  setTransform: (value: number) => void;\n};\n\nexport const Carousel: React.FC<Props> = ({\n  valuesImage,\n  transform,\n  setTransform,\n}) => {\n  const {\n    images,\n    step,\n    frameSize,\n    itemWidth,\n    animationDuration,\n    infinite,\n  } = valuesImage;\n  const lastPosition = images.length - frameSize;\n\n  function transitionNext() {\n    if (transform + step < lastPosition) {\n      setTransform(transform + step);\n    } else {\n      setTransform(lastPosition);\n    }\n\n    if (infinite && transform === lastPosition) {\n      setTransform(0);\n    }\n  }\n\n  if (transform > images.length - frameSize && !infinite) {\n    setTransform(images.length - frameSize);\n  }\n\n  function transitionPrev() {\n    if (transform - step > 0) {\n      setTransform(transform - step);\n    } else {\n      setTransform(0);\n    }\n\n    if (infinite && transform === 0) {\n      setTransform(lastPosition);\n    }\n  }\n\n  return (\n    <>\n      <div className=\"carousel\">\n        <ul\n          className=\"carousel__list\"\n          style={{ width: `${itemWidth * frameSize}px` }}\n        >\n          {images.map(image => {\n            return (\n              <li\n                key={image}\n                className=\"carousel__items\"\n                style={{\n                  transition: `transform ${animationDuration}ms`,\n                  transform: `translateX(${-transform * itemWidth}px`,\n                  width: `${step}`,\n                }}\n              >\n                <img\n                  width={itemWidth}\n                  src={image}\n                  alt=\"Emoji\"\n                  className=\"carousel__image\"\n                />\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n      <div className=\"carousel-buttons\">\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            {\n              'is-success': infinite || transform !== 0,\n              'is-light': infinite || transform !== 0,\n              'disablet-btn': !infinite && transform === 0,\n            },\n          )}\n          onClick={transitionPrev}\n        >\n          Prev\n        </button>\n        <button\n          type=\"button\"\n          className={cn(\n            'button',\n            {\n              'is-success': infinite || transform !== lastPosition,\n              'is-light': infinite || transform !== lastPosition,\n              'disablet-btn': !infinite && transform === lastPosition,\n            },\n          )}\n          onClick={transitionNext}\n        >\n          Next\n        </button>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport './Form.scss';\nimport { ValuesImgType } from '../../types/Types';\n\ninterface Props {\n  valuesImage: ValuesImgType;\n  setValuesImage: React.Dispatch<React.SetStateAction<ValuesImgType>>;\n}\n\nexport const Form: React.FC<Props> = ({\n  valuesImage,\n  setValuesImage,\n}) => (\n  <form action=\"/my-handling-form-page\" method=\"get\">\n    <ul>\n      <li>\n        <label\n          htmlFor=\"step\"\n          className=\"label\"\n        >\n          Step\n        </label>\n        <input\n          onChange={(e) => setValuesImage({\n            ...valuesImage, step: +e.target.value,\n          })}\n          value={valuesImage.step}\n          className=\"input is-primary\"\n          type=\"number\"\n          id=\"step\"\n          name=\"step\"\n          min=\"1\"\n          max=\"10\"\n        />\n      </li>\n      <li>\n        <label\n          htmlFor=\"frameSize\"\n          className=\"label\"\n        >\n          Frame Size:\n        </label>\n        <input\n          onChange={(e) => setValuesImage({\n            ...valuesImage, frameSize: +e.target.value,\n          })}\n          value={valuesImage.frameSize}\n          className=\"input is-primary\"\n          type=\"number\"\n          id=\"frameSize\"\n          name=\"frameSize\"\n          min=\"1\"\n          max=\"10\"\n        />\n      </li>\n      <li>\n        <label\n          htmlFor=\"itemWidth\"\n          className=\"label\"\n        >\n          Picture Width:\n        </label>\n        <input\n          onChange={(e) => setValuesImage({\n            ...valuesImage, itemWidth: +e.target.value,\n          })}\n          value={valuesImage.itemWidth}\n          className=\"input is-primary\"\n          type=\"number\"\n          id=\"itemWidth\"\n          name=\"itemWidth\"\n          min=\"130\"\n          max=\"260\"\n          step=\"5\"\n        />\n      </li>\n      <li>\n        <label\n          htmlFor=\"animationDuration\"\n          className=\"label\"\n        >\n          Animation Duration:\n        </label>\n        <input\n          onChange={(e) => setValuesImage({\n            ...valuesImage, animationDuration: +e.target.value,\n          })}\n          value={valuesImage.animationDuration}\n          className=\"input is-primary\"\n          type=\"number\"\n          id=\"animationDuration\"\n          name=\"user_email\"\n          min=\"0\"\n          max=\"3000\"\n          step=\"50\"\n        />\n      </li>\n      <li className=\"checkboxItems\">\n        <label\n          htmlFor=\"accepted\"\n          className=\"checkbox is-primary\"\n        >\n          Infinity scroll\n        </label>\n        <input\n          onChange={(e) => setValuesImage({\n            ...valuesImage, infinite: e.target.checked,\n          })}\n          checked={valuesImage.infinite}\n          id=\"accepted\"\n          type=\"checkbox\"\n          name=\"accepted\"\n        />\n      </li>\n    </ul>\n  </form>\n);\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel';\nimport { Form } from './components/Form';\nimport { ValuesImgType } from './types/Types';\n\nconst images: string[] = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n\nconst defaultValues: ValuesImgType = {\n  images,\n  step: 3,\n  frameSize: 3,\n  itemWidth: 130,\n  animationDuration: 1000,\n  infinite: false,\n};\n\nexport const App: React.FC = () => {\n  const [valuesImage, setValuesImage] = useState(defaultValues);\n  const [transform, setTransform] = useState(0);\n\n  return (\n    <div className=\"App section\">\n      {/* eslint-disable-next-line */}\n      <h1 data-cy='title' className=\"title\">Carousel with {images.length} images</h1>\n\n      <Carousel\n        valuesImage={valuesImage}\n        transform={transform}\n        setTransform={(value) => setTransform(value)}\n      />\n      <Form\n        valuesImage={valuesImage}\n        setValuesImage={(value) => setValuesImage(value)}\n      />\n    </div>\n  );\n};\n","import 'bulma';\n\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}